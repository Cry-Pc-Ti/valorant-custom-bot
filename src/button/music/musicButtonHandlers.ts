import { ButtonInteraction } from 'discord.js';
import { getCommandStates, setGuildCommandStates, setStopToStartFlagStates } from '../../store/guildCommandStates';
import { COMMAND_NAME_MUSIC } from '../../commands/music/mainMusicCommand';
import { streamPlaylist } from '../../events/music/playBackMusic';
import { AudioPlayerStatus, getVoiceConnection } from '@discordjs/voice';
import { interactionEditMessages } from '../../events/discord/interactionMessages';

// Ê¨°„ÅÆÊõ≤„Å∏„Éú„Çø„É≥Êäº‰∏ãÊôÇ„ÅÆÂá¶ÁêÜ
export const nextPlayMusicButton = async (interaction: ButtonInteraction) => {
  // guildId„ÇíÂèñÂæó
  const guildId = interaction.guildId;
  if (!guildId) return;

  const connection = getVoiceConnection(guildId);
  const commandStates = getCommandStates(guildId, COMMAND_NAME_MUSIC);
  const musicCommandInfo = commandStates?.musicCommandInfo;

  if (!commandStates || !musicCommandInfo || !connection) return;

  // playList„ÇíÂÜçÁîü„Åô„ÇãÂá¶ÁêÜ
  await streamPlaylist(guildId, ++musicCommandInfo.songIndex, true);

  // BOT„Çídiscord„Åã„ÇâÂàáÊñ≠
  connection.destroy();

  return;
};
// Ââç„ÅÆÊõ≤„Å∏„Éú„Çø„É≥Êäº‰∏ãÊôÇ„ÅÆÂá¶ÁêÜ
export const prevPlayMusicButton = async (interaction: ButtonInteraction) => {
  // guildId„ÇíÂèñÂæó
  const guildId = interaction.guildId;
  if (!guildId) return;

  const connection = getVoiceConnection(guildId);
  const commandStates = getCommandStates(guildId, COMMAND_NAME_MUSIC);
  const musicCommandInfo = commandStates?.musicCommandInfo;

  if (!commandStates || !musicCommandInfo || !connection) return;

  // playList„ÇíÂÜçÁîü„Åô„ÇãÂá¶ÁêÜ
  await streamPlaylist(guildId, --musicCommandInfo.songIndex, true);

  // BOT„Çídiscord„Åã„ÇâÂàáÊñ≠
  connection.destroy();

  return;
};

// ÂÜçÁîü/ÂÅúÊ≠¢„Éú„Çø„É≥Êäº‰∏ãÊôÇ
export const stopPlayMusicButton = async (interaction: ButtonInteraction) => {
  // guildId„ÇíÂèñÂæó
  const guildId = interaction.guildId;
  if (!guildId) return;

  const commandStates = getCommandStates(guildId, COMMAND_NAME_MUSIC);
  const musicCommandInfo = commandStates?.musicCommandInfo;
  if (!commandStates || !musicCommandInfo) return;

  if (commandStates.musicCommandInfo?.player.state.status === AudioPlayerStatus.Playing) {
    commandStates.musicCommandInfo?.player.pause();
    musicCommandInfo.buttonRowArray[0].components[1].setLabel('ÂÜçÁîü');
    musicCommandInfo.buttonRowArray[0].components[1].setEmoji('‚ñ∂');
    setStopToStartFlagStates(guildId, COMMAND_NAME_MUSIC, true);
  } else if (commandStates.musicCommandInfo?.player.state.status === AudioPlayerStatus.Paused) {
    commandStates.musicCommandInfo?.player.unpause();
    musicCommandInfo.buttonRowArray[0].components[1].setLabel('ÂÅúÊ≠¢');
    musicCommandInfo.buttonRowArray[0].components[1].setEmoji('‚è∏');
    setStopToStartFlagStates(guildId, COMMAND_NAME_MUSIC, false);
  }
  // „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°
  interactionEditMessages(commandStates.interaction, commandStates.replyMessageId, {
    components: musicCommandInfo.buttonRowArray,
  });
  return;
};

// 1Êõ≤„É™„Éî„Éº„Éà„Éú„Çø„É≥Êäº‰∏ãÊôÇ
export const repeatSingleButton = async (interaction: ButtonInteraction) => {
  // guildId„ÇíÂèñÂæó
  const guildId = interaction.guildId;
  if (!guildId) return;

  const connection = getVoiceConnection(guildId);
  const commandStates = getCommandStates(guildId, COMMAND_NAME_MUSIC);
  const musicCommandInfo = commandStates?.musicCommandInfo;

  if (!commandStates || !musicCommandInfo || !connection) return;

  musicCommandInfo.repeatMode++;
  if (musicCommandInfo.repeatMode >= 3) musicCommandInfo.repeatMode = 0;

  // „É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂâäÈô§
  if (await interaction.channel?.messages.fetch(commandStates.replyMessageId)) {
    await interactionEditMessages(commandStates.interaction, commandStates.replyMessageId, '');
  }

  const labelsAndEmojis = [
    { label: '„É™„Éî„Éº„Éà', emoji: 'üîÅ' },
    { label: 'Êõ≤„É™„Éî„Éº„Éà‰∏≠', emoji: 'üîÇ' },
    { label: '„É™„Çπ„Éà„É™„Éî„Éº„Éà‰∏≠', emoji: 'üîÅ' },
  ];

  const { label, emoji } = labelsAndEmojis[musicCommandInfo.repeatMode];
  musicCommandInfo.buttonRowArray[1].components[0].setLabel(label);
  musicCommandInfo.buttonRowArray[1].components[0].setEmoji(emoji);

  interactionEditMessages(commandStates.interaction, commandStates.replyMessageId, {
    components: musicCommandInfo.buttonRowArray,
  });
  setGuildCommandStates(guildId, COMMAND_NAME_MUSIC, {
    buttonCollector: commandStates.buttonCollector,
    interaction: commandStates.interaction,
    replyMessageId: commandStates.replyMessageId,
    musicCommandInfo: musicCommandInfo,
  });
  return;
};

// „Éó„É¨„Ç§„É™„Çπ„Éà„ÅÆURL„ÇíË°®Á§∫
export const showUrlButton = async (interaction: ButtonInteraction) => {
  // guildId„ÇíÂèñÂæó
  const guildId = interaction.guildId;
  if (!guildId) return;

  const connection = getVoiceConnection(guildId);
  const commandStates = getCommandStates(guildId, COMMAND_NAME_MUSIC);
  const musicCommandInfo = commandStates?.musicCommandInfo;

  if (!commandStates || !musicCommandInfo || !connection) return;

  await interaction.followUp({ content: `${musicCommandInfo.playListInfo.url}`, ephemeral: true });
};
